const Receipt = require('../models/receipt.model');

// Create a new receipt
exports.createReceipt = async (req, res) => {
  try {
    const data = req.body;
    console.log('üîç Receipt Create - Donn√©es re√ßues:', {
      receiptNumber: data.receiptNumber,
      nomCaissier: data.nomCaissier,
      client: data.client?.name + ' ' + data.client?.firstname,
      total: data.total,
      produits: data.produits?.length || 0
    });
    
    console.log('üîç Receipt Create - User info from middleware:', {
      userId: req.userId,
      userRole: req.userRole,
      userNomComplet: req.userNomComplet
    });
    
    const receipt = new Receipt(data);
    await receipt.save();
    
    console.log('‚úÖ Receipt Create - Re√ßu cr√©√© avec succ√®s:', {
      id: receipt._id,
      nomCaissier: receipt.nomCaissier
    });
    
    return res.status(201).json(receipt);
  } catch (err) {
    console.error('‚ùå Receipt Create - Erreur cr√©ation re√ßu :', err);
    return res.status(500).json({ message: 'Impossible de cr√©er le re√ßu.' });
  }
};

/**
 * GET /api/receipts
 * R√©cup√®re tous les re√ßus, √©ventuellement filtr√©s par date.
 * Query params facultatifs :
 *   - from (YYYY-MM-DD)
 *   - to   (YYYY-MM-DD)
 */
// exports.getAllReceipts = async (req, res) => {
//   try {
//     const filter = {};
//     const { from, to } = req.query;

//     if (from || to) {
//       filter.dateTime = {};
//       if (from) filter.dateTime.$gte = new Date(`${from}T00:00:00Z`);
//       if (to)   filter.dateTime.$lte = new Date(`${to}T23:59:59Z`);
//     }

//     const receipts = await Receipt.find(filter).sort({ dateTime: -1 });

//     // ===== AJOUTER CE LOG =====
//     console.log(`‚ñ∂ Nombre de re√ßus retourn√©s : ${receipts.length}`);
//     // ==========================

//     return res.status(200).json(receipts);
//   } catch (err) {
//     console.error('Erreur r√©cup√©ration re√ßus :', err);
//     return res.status(500).json({ message: 'Impossible de r√©cup√©rer les re√ßus.' });
//   }
// };


/** 
GET /api/receipts
    ?from=YYYY-MM-DD        // d√©but intervalle (optionnel)
    &to=YYYY-MM-DD          // fin intervalle (optionnel)
    &date=YYYY-MM-DD        // date fixe (ignore from/to si pr√©sent)
    &cashier=<caissierId>   // filtre par nomCaissier ou ID
    &product=<serviceId>    // filtre par produits.productId
    &status=paid|due        // ¬´ paid ¬ª pour paid>0&due=0, ¬´ due ¬ª pour due>0 
 */

exports.getAllReceipts = async (req, res) => {
  try {
    const { date, from, to, cashier, product, status } = req.query;
    const filter = {};

    //  ‚Äî‚Äî Date fixe ou intervalle ‚Äî‚Äî
    if (date) {
      // date unique
      const start = new Date(`${date}T00:00:00Z`);
      const end   = new Date(`${date}T23:59:59Z`);
      filter.dateTime = { $gte: start, $lte: end };
    } else if (from || to) {
      filter.dateTime = {};
      if (from) filter.dateTime.$gte = new Date(`${from}T00:00:00Z`);
      if (to)   filter.dateTime.$lte = new Date(`${to}T23:59:59Z`);
    }

    //  ‚Äî‚Äî Filtre par caissier ‚Äî‚Äî
    if (cashier) {
      filter.nomCaissier = cashier;
    }

    //  ‚Äî‚Äî Filtre par produit/service ‚Äî‚Äî
    console.log("Produit 1 :",product);

    if (product) {
      console.log("‚ñ∂ Filtrage produit/service :", product);

      // On accepte soit un ID exact, soit une d√©signation dans produits.label
      filter['produits'] = {
        $elemMatch: {
          $or: [
            // { productId: product },             // recherche par ID exact
            { label: { $regex: product, $options: 'i' } }  // recherche par nom partiel, insensible √† la casse
          ]
        }
      };
    }



    //  ‚Äî‚Äî Filtre par statut de paiement ‚Äî‚Äî
    if (status === 'paid') {
      filter.due = 0;
    } else if (status === 'due') {
      filter.due = { $gt: 0 };
    }

    const receipts = await Receipt.find(filter).sort({ dateTime: -1 });

    console.log(`‚ñ∂ getAllReceipts ‚Äì filtres ${JSON.stringify(req.query)} renvoie ${receipts.length}`);

    return res.status(200).json(receipts);
  } catch (err) {
    console.error('Erreur r√©cup√©ration re√ßus avec filtres :', err);
    return res.status(500).json({ message: 'Impossible de r√©cup√©rer les re√ßus.' });
  }
};


/**
 * GET /api/receipts/date/:date
 * Renvoie tous les re√ßus de la date exacte (YYYY-MM-DD)
 */
exports.getReceiptsByDate = async (req, res) => {
  try {
    const { date } = req.params;
    // D√©but et fin de journ√©e
    const start = new Date(`${date}T00:00:00Z`);
    const end   = new Date(`${date}T23:59:59Z`);

    // Filtrage strict sur dateTime
    const receipts = await Receipt.find({
      dateTime: { $gte: start, $lte: end }
    }).sort({ dateTime: -1 });

    console.log(`‚ñ∂ Re√ßus pour la journ√©e ${date} : ${receipts.length}`);

    return res.status(200).json(receipts);
  } catch (err) {
    console.error(`Erreur r√©cup√©ration re√ßus pour ${req.params.date} :`, err);
    return res.status(500).json({
      message: `Impossible de r√©cup√©rer les re√ßus pour la date ${req.params.date}.`
    });
  }
};



// Get receipt by ID
exports.getReceiptById = async (req, res) => {
  try {
    const receipt = await Receipt.findById(req.params.id).populate('produits.productId');
    if (!receipt) return res.status(404).json({ message: 'Re√ßu non trouv√©.' });
    return res.status(200).json(receipt);
  } catch (err) {
    console.error('Erreur r√©cup√©ration re√ßu :', err);
    return res.status(500).json({ message: 'Impossible de r√©cup√©rer le re√ßu.' });
  }
};

// Update existing receipt
exports.updateReceipt = async (req, res) => {
  try {
    const updates = req.body;
    const options = { new: true, runValidators: true };
    const updated = await Receipt.findByIdAndUpdate(req.params.id, updates, options);
    if (!updated) return res.status(404).json({ message: 'Re√ßu non trouv√© pour mise √† jour.' });
    return res.status(200).json(updated);
  } catch (err) {
    console.error('Erreur mise √† jour re√ßu :', err);
    return res.status(500).json({ message: 'Impossible de mettre √† jour le re√ßu.' });
  }
};

// Delete a receipt
exports.deleteReceipt = async (req, res) => {
  try {
    const deleted = await Receipt.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: 'Re√ßu non trouv√© pour suppression.' });
    return res.status(200).json({ message: 'Re√ßu supprim√©.' });
  } catch (err) {
    console.error('Erreur suppression re√ßu :', err);
    return res.status(500).json({ message: 'Impossible de supprimer le re√ßu.' });
  }
};

// Update receipt status (paid/due)
exports.updateReceiptStatus = async (req, res) => {
  try {
    const { receiptNumber } = req.params;
    const { paid, due } = req.body;

    console.log('üîç Update Receipt Status - Donn√©es re√ßues:', {
      receiptNumber,
      paid,
      due,
      userRole: req.userRole
    });

    // Validation des donn√©es
    if (typeof paid !== 'number' || typeof due !== 'number') {
      return res.status(400).json({ 
        message: 'Les montants paid et due doivent √™tre des nombres.' 
      });
    }

    if (paid < 0 || due < 0) {
      return res.status(400).json({ 
        message: 'Les montants ne peuvent pas √™tre n√©gatifs.' 
      });
    }

    // Trouver et mettre √† jour le re√ßu
    const updatedReceipt = await Receipt.findOneAndUpdate(
      { receiptNumber: receiptNumber },
      { 
        paid: paid,
        due: due
      },
      { new: true, runValidators: true }
    );

    if (!updatedReceipt) {
      return res.status(404).json({ 
        message: 'Re√ßu non trouv√©.' 
      });
    }

    console.log('‚úÖ Update Receipt Status - Statut mis √† jour:', {
      receiptNumber: updatedReceipt.receiptNumber,
      paid: updatedReceipt.paid,
      due: updatedReceipt.due
    });

    return res.status(200).json({
      success: true,
      message: 'Statut mis √† jour avec succ√®s',
      receipt: updatedReceipt
    });
  } catch (err) {
    console.error('‚ùå Update Receipt Status - Erreur:', err);
    return res.status(500).json({ 
      message: 'Impossible de mettre √† jour le statut du re√ßu.' 
    });
  }
};
